"use client"

import { useState } from 'react'
import { X, Link2, Copy, Check, Mail, UserPlus, MoreVertical, Trash2, ChevronDown } from 'lucide-react'
import { Button } from '../Button'

interface ShareLinkModalProps {
  isOpen: boolean
  onClose: () => void
  project: {
    id: string
    name: string
    slug: string
  }
}

interface Collaborator {
  id: string
  name: string
  email: string
  role: 'admin' | 'viewer'
  avatar?: string
  status: 'active' | 'pending'
}

// Mock collaborators data
const mockCollaborators: Collaborator[] = [
  {
    id: '1',
    name: 'Sarah Chen',
    email: 'sarah@example.com',
    role: 'admin',
    status: 'active'
  },
  {
    id: '2',
    name: 'Mike Rodriguez',
    email: 'mike@example.com',
    role: 'viewer',
    status: 'pending'
  }
]

export function ShareLinkModal({ isOpen, onClose, project }: ShareLinkModalProps) {
  const [copied, setCopied] = useState(false)
  const [collabLinkCopied, setCollabLinkCopied] = useState(false)
  const [inviteEmail, setInviteEmail] = useState('')
  const [inviteRole, setInviteRole] = useState<'admin' | 'viewer'>('viewer')
  const [collaborators, setCollaborators] = useState<Collaborator[]>(mockCollaborators)
  const [isInviting, setIsInviting] = useState(false)
  const [isGeneratingLink, setIsGeneratingLink] = useState(false)
  // Mock collaboration link - this would be generated by backend
  const [collaborationLink, setCollaborationLink] = useState(`https://logspace.dev/invite/${project.slug}?token=abc123xyz`)

  if (!isOpen) return null

  const publicUrl = `https://logspace.dev/project/${project.slug}`

  const handleCopyLink = async () => {
    try {
      if (navigator.clipboard && window.isSecureContext) {
        await navigator.clipboard.writeText(publicUrl)
      } else {
        // Fallback for insecure contexts
        const textArea = document.createElement('textarea')
        textArea.value = publicUrl
        document.body.appendChild(textArea)
        textArea.focus()
        textArea.select()
        document.execCommand('copy')
        document.body.removeChild(textArea)
      }
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error('Failed to copy:', err)
    }
  }

  const handleCopyCollabLink = async () => {
    try {
      if (navigator.clipboard && window.isSecureContext) {
        await navigator.clipboard.writeText(collaborationLink)
      } else {
        // Fallback for insecure contexts
        const textArea = document.createElement('textarea')
        textArea.value = collaborationLink
        document.body.appendChild(textArea)
        textArea.focus()
        textArea.select()
        document.execCommand('copy')
        document.body.removeChild(textArea)
      }
      setCollabLinkCopied(true)
      setTimeout(() => setCollabLinkCopied(false), 2000)
    } catch (err) {
      console.error('Failed to copy:', err)
    }
  }

  const handleGenerateNewCollabLink = async () => {
    setIsGeneratingLink(true)
    
    try {
      // TODO: Call backend to generate new collaboration link
      console.log('Generating new collaboration link for project:', project.slug)
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      // Mock new link generation
      const newToken = Math.random().toString(36).substring(2, 15)
      setCollaborationLink(`https://logspace.dev/invite/${project.slug}?token=${newToken}`)
    } catch (error) {
      console.error('Failed to generate new link:', error)
    } finally {
      setIsGeneratingLink(false)
    }
  }

  const handleSendInvite = async () => {
    if (!inviteEmail.trim()) return
    
    setIsInviting(true)
    
    try {
      // TODO: Send invite to backend
      console.log('Sending invite:', { email: inviteEmail, role: inviteRole })
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      // Add to collaborators list as pending
      const newCollaborator: Collaborator = {
        id: Date.now().toString(),
        name: inviteEmail.split('@')[0],
        email: inviteEmail,
        role: inviteRole,
        status: 'pending'
      }
      
      setCollaborators(prev => [...prev, newCollaborator])
      setInviteEmail('')
      setInviteRole('viewer')
    } catch (error) {
      console.error('Failed to send invite:', error)
    } finally {
      setIsInviting(false)
    }
  }

  const handleRoleChange = (collaboratorId: string, newRole: 'admin' | 'viewer') => {
    setCollaborators(prev => 
      prev.map(collab => 
        collab.id === collaboratorId 
          ? { ...collab, role: newRole }
          : collab
      )
    )
    // TODO: Update role in backend
  }

  const handleRemoveCollaborator = (collaboratorId: string) => {
    setCollaborators(prev => prev.filter(collab => collab.id !== collaboratorId))
    // TODO: Remove from backend
  }

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
      {/* Backdrop */}
      <div 
        className="absolute inset-0 bg-black/60 backdrop-blur-sm animate-fade-in"
        onClick={onClose}
      />
      
      {/* Modal */}
      <div className="relative w-full max-w-2xl bg-surface border border-border rounded-2xl shadow-2xl animate-scale-in overflow-hidden max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="px-6 py-5 border-b border-border">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-xl sm:text-2xl font-bold text-foreground">
                Share Project
              </h2>
              <p className="text-sm text-text-secondary mt-1">
                Share {project.name} with the world or invite collaborators
              </p>
            </div>
            <button
              onClick={onClose}
              className="p-2 hover:bg-surface-light rounded-lg transition-colors duration-200"
              aria-label="Close modal"
            >
              <X className="w-5 h-5 text-text-secondary" />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 space-y-8">
          {/* Public Project Showcase Link */}
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Link2 className="w-5 h-5 text-blue-400" />
              <h3 className="text-lg font-semibold text-foreground">
                Public Project Page
              </h3>
            </div>
            
            <p className="text-sm text-text-secondary leading-relaxed">
              Anyone can view this project&apos;s public dashboard. Use it to showcase progress, 
              highlight milestones, and share your build journey.
            </p>

            <div className="bg-surface-light border border-border rounded-lg overflow-hidden">
              <div className="flex items-center">
                <div className="flex-1 px-4 py-3">
                  <p className="text-sm font-mono text-foreground truncate">
                    {publicUrl}
                  </p>
                </div>
                <div className="flex items-center gap-2 px-3">
                  <button
                    onClick={handleCopyLink}
                    className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-foreground hover:bg-surface rounded-md transition-colors duration-200"
                  >
                    {copied ? (
                      <>
                        <Check className="w-4 h-4 text-green-400" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Copy className="w-4 h-4" />
                        Copy
                      </>
                    )}
                  </button>
                  <button
                    disabled
                    className="px-3 py-2 text-sm font-medium text-text-secondary bg-surface-light rounded-md cursor-not-allowed opacity-50"
                  >
                    Regenerate Link
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Collaboration Invite Link */}
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <UserPlus className="w-5 h-5 text-green-400" />
              <h3 className="text-lg font-semibold text-foreground">
                Collaboration Invite Link
              </h3>
            </div>
            
            <p className="text-sm text-text-secondary leading-relaxed">
              Share this special link with people you want to collaborate with. 
              They&apos;ll be able to join as contributors and help build your project.
            </p>

            <div className="bg-surface-light border border-border rounded-lg overflow-hidden">
              <div className="flex items-center">
                <div className="flex-1 px-4 py-3">
                  <p className="text-sm font-mono text-foreground truncate">
                    {collaborationLink}
                  </p>
                </div>
                <div className="flex items-center gap-2 px-3">
                  <button
                    onClick={handleCopyCollabLink}
                    className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-foreground hover:bg-surface rounded-md transition-colors duration-200"
                  >
                    {collabLinkCopied ? (
                      <>
                        <Check className="w-4 h-4 text-green-400" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Copy className="w-4 h-4" />
                        Copy
                      </>
                    )}
                  </button>
                  <button
                    onClick={handleGenerateNewCollabLink}
                    disabled={isGeneratingLink}
                    className="px-3 py-2 text-sm font-medium text-foreground hover:bg-surface rounded-md transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isGeneratingLink ? 'Generating...' : 'New Link'}
                  </button>
                </div>
              </div>
            </div>

            <div className="bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg p-3">
              <p className="text-xs text-amber-800 dark:text-amber-200 leading-relaxed">
                💡 <strong>Tip:</strong> This link allows anyone to join as a collaborator. 
                Generate a new link if you need to revoke access to the current one.
              </p>
            </div>
          </div>

          {/* Invite Collaborators */}
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Mail className="w-5 h-5 text-purple-400" />
              <h3 className="text-lg font-semibold text-foreground">
                Invite by Email
              </h3>
            </div>

            {/* Invite Form */}
            <div className="bg-surface-light border border-border rounded-lg p-4">
              <div className="flex flex-col sm:flex-row gap-3">
                <div className="flex-1">
                  <input
                    type="email"
                    placeholder="Enter email address"
                    value={inviteEmail}
                    onChange={(e) => setInviteEmail(e.target.value)}
                    className="w-full bg-surface border border-border rounded-lg px-3 py-2 text-foreground placeholder-text-secondary focus:ring-2 focus:ring-primary/20 focus:border-primary transition-colors duration-200"
                  />
                </div>
                
                <div className="relative">
                  <label htmlFor="invite-role" className="sr-only">Role</label>
                  <select
                    id="invite-role"
                    value={inviteRole}
                    onChange={(e) => setInviteRole(e.target.value as 'admin' | 'viewer')}
                    className="appearance-none bg-surface border border-border rounded-lg px-3 py-2 pr-8 text-foreground focus:ring-2 focus:ring-primary/20 focus:border-primary transition-colors duration-200 cursor-pointer"
                  >
                    <option value="viewer">Viewer</option>
                    <option value="admin">Admin</option>
                  </select>
                  <ChevronDown className="absolute right-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-text-secondary pointer-events-none" />
                </div>

                <Button
                  onClick={handleSendInvite}
                  disabled={!inviteEmail.trim() || isInviting}
                  variant="primary"
                  className="px-4 py-2 min-h-[40px]"
                >
                  {isInviting ? (
                    'Sending...'
                  ) : (
                    <>
                      <Mail className="w-4 h-4 mr-2" />
                      Send Invite
                    </>
                  )}
                </Button>
              </div>
            </div>

            {/* Current Collaborators */}
            {collaborators.length > 0 && (
              <div className="space-y-3">
                <h4 className="text-sm font-medium text-foreground">
                  Current Collaborators ({collaborators.length})
                </h4>
                
                <div className="space-y-2">
                  {collaborators.map((collaborator) => (
                    <div
                      key={collaborator.id}
                      className="flex items-center justify-between p-3 bg-surface-light border border-border rounded-lg"
                    >
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center">
                          <span className="text-sm font-medium text-primary">
                            {collaborator.name.charAt(0).toUpperCase()}
                          </span>
                        </div>
                        <div>
                          <p className="text-sm font-medium text-foreground">
                            {collaborator.name}
                          </p>
                          <p className="text-xs text-text-secondary">
                            {collaborator.email}
                          </p>
                        </div>
                        {collaborator.status === 'pending' && (
                          <span className="px-2 py-1 text-xs bg-orange-500/20 text-orange-400 rounded-full">
                            Pending
                          </span>
                        )}
                      </div>

                      <div className="flex items-center gap-2">
                        <div className="relative">
                          <label htmlFor={`role-${collaborator.id}`} className="sr-only">Change role for {collaborator.name}</label>
                          <select
                            id={`role-${collaborator.id}`}
                            value={collaborator.role}
                            onChange={(e) => handleRoleChange(collaborator.id, e.target.value as 'admin' | 'viewer')}
                            className="appearance-none bg-surface border border-border rounded-md px-2 py-1 pr-6 text-xs text-foreground focus:ring-1 focus:ring-primary/20 focus:border-primary transition-colors duration-200 cursor-pointer"
                          >
                            <option value="viewer">Viewer</option>
                            <option value="admin">Admin</option>
                          </select>
                          <ChevronDown className="absolute right-1 top-1/2 transform -translate-y-1/2 w-3 h-3 text-text-secondary pointer-events-none" />
                        </div>
                        
                        <button
                          onClick={() => handleRemoveCollaborator(collaborator.id)}
                          className="p-1.5 hover:bg-red-500/20 hover:text-red-400 text-text-secondary rounded-md transition-colors duration-200"
                          aria-label="Remove collaborator"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Info Box */}
          <div className="bg-primary/5 border border-primary/20 rounded-lg p-4">
            <p className="text-sm text-text-secondary leading-relaxed">
              <span className="font-medium text-primary">💡 Collaboration Info:</span> Invited users will be able to contribute to your project. 
              <strong className="text-foreground"> Admins</strong> can edit settings, logs, and manage other collaborators. 
              <strong className="text-foreground"> Viewers</strong> can only see internal updates.
            </p>
          </div>
        </div>

        {/* Footer */}
        <div className="px-6 py-4 bg-surface-light border-t border-border">
          <div className="flex justify-end">
            <Button 
              variant="ghost" 
              onClick={onClose}
              className="px-6 py-2"
            >
              Done
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}
